import { createAction } from 'redux-actions';
import { Action } from 'redux';

import * as Actions from './index';
import { ConfigJsonModalTabState } from '../edit/configJsonModal';
import {ICanaryConfig, ICanaryMetricConfig} from '../domain/ICanaryConfig';
import { ICanaryConfigSummary } from '../domain/ICanaryConfigSummary';
import { IJudge } from '../domain/IJudge';
import { IMetricSetPair } from '../domain/IMetricSetPair';
import { ICanaryExecutionStatusResult } from '../domain/ICanaryExecutionStatusResult';
import { IUpdateListPayload } from '../layout/list';

export interface IKayentaAction<T> extends Action {
  payload: T;
}

export const openDeleteConfigModal = createAction(Actions.DELETE_CONFIG_MODAL_OPEN);
export const closeDeleteConfigModal = createAction(Actions.DELETE_CONFIG_MODAL_CLOSE);
export const deleteConfig = createAction(Actions.DELETE_CONFIG_REQUEST);
export const closeConfigJsonModal = createAction(Actions.CONFIG_JSON_MODAL_CLOSE);
export const openConfigJsonModal = createAction(Actions.CONFIG_JSON_MODAL_OPEN);
export const editMetricCancel = createAction(Actions.EDIT_METRIC_CANCEL);
export const editMetricConfirm = createAction(Actions.EDIT_METRIC_CONFIRM);
export const updateMetricDirection = createAction<{id: string, direction: string}>(Actions.UPDATE_METRIC_DIRECTION);
export const addGroup = createAction(Actions.ADD_GROUP);
export const saveConfig = createAction(Actions.SAVE_CONFIG_REQUEST);
export const dismissSaveConfigError = createAction(Actions.DISMISS_SAVE_CONFIG_ERROR);
export const setConfigJsonModalTabState = createAction<{state: ConfigJsonModalTabState}>(Actions.SET_CONFIG_JSON_MODAL_TAB_STATE);
export const setConfigJson = createAction<{json: string}>(Actions.SET_CONFIG_JSON);
export const deleteConfigSuccess = createAction(Actions.DELETE_CONFIG_SUCCESS);
export const loadConfigRequest = createAction<{id: string}>(Actions.LOAD_CONFIG_REQUEST);
export const saveConfigSuccess = createAction<{id: string}>(Actions.SAVE_CONFIG_SUCCESS);
export const selectConfig = createAction<{config: ICanaryConfig}>(Actions.SELECT_CONFIG);
export const clearSelectedConfig = createAction(Actions.CLEAR_SELECTED_CONFIG);
export const renameMetric = createAction<{id: string, name: string}>(Actions.RENAME_METRIC);
export const selectGroup = createAction<{name: string}>(Actions.SELECT_GROUP);
export const updateGroupWeight = createAction<{group: string, weight: number}>(Actions.UPDATE_GROUP_WEIGHT);
export const selectJudgeName = createAction<{judge: {name: string}}>(Actions.SELECT_JUDGE_NAME);
export const editMetricBegin = createAction<{id: string}>(Actions.EDIT_METRIC_BEGIN);
export const removeMetric = createAction<{id: string}>(Actions.REMOVE_METRIC);
export const addMetric = createAction<{metric: ICanaryMetricConfig}>(Actions.ADD_METRIC);
export const updateConfigName = createAction<{name: string}>(Actions.UPDATE_CONFIG_NAME);
export const updateConfigDescription = createAction<{description: string}>(Actions.UPDATE_CONFIG_DESCRIPTION);
export const updateScoreThresholds = createAction<{marginal: number, pass: number}>(Actions.UPDATE_SCORE_THRESHOLDS);
export const saveConfigFailure = createAction<{error: Error}>(Actions.SAVE_CONFIG_FAILURE);
export const deleteConfigFailure = createAction<{error: Error}>(Actions.DELETE_CONFIG_FAILURE);
export const updateConfigSummaries = createAction<{configSummaries: ICanaryConfigSummary[]}>(Actions.UPDATE_CONFIG_SUMMARIES);
export const updateJudges = createAction<{judges: IJudge[]}>(Actions.UPDATE_JUDGES);
export const loadConfigSuccess = createAction<{config: ICanaryConfig}>(Actions.LOAD_CONFIG_SUCCESS);
export const loadConfigFailure = createAction<{error: Error}>(Actions.LOAD_CONFIG_FAILURE);
export const copySelectedConfig = createAction(Actions.COPY_SELECTED_CONFIG);
export const createNewConfig = createAction(Actions.CREATE_NEW_CONFIG);
export const editGroupBegin = createAction<{group: string}>(Actions.EDIT_GROUP_BEGIN);
export const editGroupUpdate = createAction<{edit: string}>(Actions.EDIT_GROUP_UPDATE);
export const editGroupConfirm = createAction<{group: string, edit: string}>(Actions.EDIT_GROUP_CONFIRM);
export const changeMetricGroupSelect = createAction<{group: string}>(Actions.CHANGE_METRIC_GROUP_SELECT);
export const changeMetricGroupConfirm = createAction<{metricId: string}>(Actions.CHANGE_METRIC_GROUP_CONFIRM);
export const loadRunRequest = createAction<{configId: string, runId: string}>(Actions.LOAD_RUN_REQUEST);
export const loadRunSuccess = createAction<{run: ICanaryExecutionStatusResult}>(Actions.LOAD_RUN_SUCCESS);
export const loadRunFailure = createAction<{error: Error}>(Actions.LOAD_RUN_FAILURE);
export const selectReportMetricGroup = createAction<{group: string}>(Actions.SELECT_REPORT_METRIC_GROUP);
export const selectReportMetric = createAction<{metricId: string}>(Actions.SELECT_REPORT_METRIC);
export const loadMetricSetPairRequest = createAction<{pairId: string}>(Actions.LOAD_METRIC_SET_PAIR_REQUEST);
export const loadMetricSetPairSuccess = createAction<{metricSetPair: IMetricSetPair}>(Actions.LOAD_METRIC_SET_PAIR_SUCCESS);
export const loadMetricSetPairFailure = createAction<{error: Error}>(Actions.LOAD_METRIC_SET_PAIR_FAILURE);
export const editTemplateBegin = createAction<{name: string, value: string}>(Actions.EDIT_TEMPLATE_BEGIN);
export const editTemplateConfirm = createAction(Actions.EDIT_TEMPLATE_CONFIRM);
export const editTemplateCancel = createAction(Actions.EDIT_TEMPLATE_CANCEL);
export const editTemplateName = createAction<{name: string}>(Actions.EDIT_TEMPLATE_NAME);
export const editTemplateValue = createAction<{value: string}>(Actions.EDIT_TEMPLATE_VALUE);
export const updateStackdriverGroupBy = createAction<IUpdateListPayload>(Actions.UPDATE_STACKDRIVER_GROUP_BY_FIELDS)
export const deleteTemplate = createAction<{name: string}>(Actions.DELETE_TEMPLATE);
export const selectTemplate = createAction<{name: string}>(Actions.SELECT_TEMPLATE);
export const updateMetricScopeName = createAction<{scopeName: string}>(Actions.UPDATE_METRIC_SCOPE_NAME);
export const changeMetricGroup = createAction<{id: string}>(Actions.CHANGE_METRIC_GROUP);
export const updateCanaryExecutions = createAction<{executions: ICanaryExecutionStatusResult[]}>(Actions.UPDATE_CANARY_EXECUTIONS);
